# Name of your application. Used to uniquely configure containers.
service: rails_dashboard_template

# Name of the container image.
image: deploy/rails_dashboard_template

# Deploy to these servers.
servers:
  web:
    - 192.168.100.243
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  app_port: 3000
  host: rails.chaofan.live

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: 192.168.100.155:5000
  username: deploy

  # Always use an access token rather than real password when possible.
  password: neekin

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true
    # Set number of processes dedicated to Solid Queue (default: 1)
    RAILS_ENV: production
    MINIO_ENDPOINT: "http://minio:9000"
    MINIO_PUBLIC_ENDPOINT: "https://minio.chaofan.live"
    MINIO_ACCESS_KEY_ID: "admin"
    MINIO_SECRET_ACCESS_KEY: "admin123"
    MYSQL_ROOT_PASSWORD: "password"
    JOB_CONCURRENCY: 3
    GITHUB_CLIENT_ID: "7d946d59e9418e76e344"
    GITHUB_CLIENT_SECRET: "83a9ebc33e2c11fc48799f5366d152655d75b598"
    FRONTEND_URL: "https://rails.chaofan.live"
    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use rails_dashboard_template-db for a db accessory server on same machine via local kamal docker network.
    DB_HOST: 192.168.100.243

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "rails_dashboard_template_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: arm64
  driver: docker-container

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.3.4
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  user: neekin

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
accessories:
  db:
    image: mysql
    host: 192.168.100.243
    port: "127.0.0.1:3306:3306"
    env:
      clear:
        MYSQL_ROOT_HOST: '%'
        MYSQL_ROOT_PASSWORD: "<%= ENV.fetch('MYSQL_ROOT_PASSWORD', 'admin123') %>"
    files:
      - config/mysql/production.cnf:/etc/mysql/my.cnf
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/mysql
  minio:
    image: quay.io/minio/minio
    service: minio
    proxy:
      app_port: 9000
      host: minio.chaofan.live
      healthcheck:
        path: /minio/health/live
    roles:
      - web # 角色保持不变，Kamal 仍需知道在哪个服务器上运行
    cmd: server /data --console-address ":9001"
    env:
      MINIO_ROOT_USER: "<%= ENV.fetch('MINIO_ACCESS_KEY_ID', 'admin') %>"
      MINIO_ROOT_PASSWORD: "<%= ENV.fetch('MINIO_SECRET_ACCESS_KEY', 'admin123') %>"
      MINIO_ENDPOINT: "https://minio.chaofan.live"
    volumes:
      - "minio-data:/data"
    port: "9001:9001" 
    # labels:
      # traefik.enable: "true" # 保持启用，因为 API 仍然通过 Traefik

      # # --- MinIO API Router (保持不变) ---
      # traefik.http.routers.minio.rule: "Host(`minio.chaofan.live`)"
      # traefik.http.routers.minio.entrypoints: "web"
      # traefik.http.services.minio.loadbalancer.server.port: "9000"